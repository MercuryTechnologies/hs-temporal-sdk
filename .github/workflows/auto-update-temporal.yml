name: Auto-update Temporal SDK

on:
  push:
    branches:
      - auto-updater
  workflow_dispatch:
    # Allow manual triggering

env:
  # Use a personal access token with repo scope for creating PRs
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-and-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better git operations
          fetch-depth: 0
          # Use token for authentication
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix
        uses: cachix/install-nix-action@v26

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: devenv

      - name: Make script executable
        run: chmod +x scripts/update-temporal-revision.sh

      - name: Check for new Temporal revision
        id: check-revision
        run: |
          # Enter devenv shell and check for updates
          nix develop . --impure --accept-flake-config --command '
            # Get current revision
            CURRENT_REV=$(./scripts/update-temporal-revision.sh --dry-run next 2>&1 | grep "Target revision:" | cut -d" " -f3)

            # Get the next revision
            NEXT_REV=$(./scripts/update-temporal-revision.sh --dry-run next 2>&1 | grep "Target revision:" | cut -d" " -f3)

            # Check if there'"'"'s a new revision
            if [ "$CURRENT_REV" != "$NEXT_REV" ]; then
              echo "new_revision=$NEXT_REV" >> $GITHUB_OUTPUT
              echo "current_revision=$CURRENT_REV" >> $GITHUB_OUTPUT
              echo "has_update=true" >> $GITHUB_OUTPUT
            else
              echo "has_update=false" >> $GITHUB_OUTPUT
            fi

            echo "Current revision: $CURRENT_REV"
            echo "Next revision: $NEXT_REV"
            echo "Has update: ${{ steps.check-revision.outputs.has_update }}"
          '

      - name: Create update branch
        if: steps.check-revision.outputs.has_update == 'true'
        run: |
          # Create a new branch for the update
          BRANCH_NAME="update-temporal-to-${{ steps.check-revision.outputs.new_revision }}"
          git checkout -b "$BRANCH_NAME"

          echo "Created branch: $BRANCH_NAME"

      - name: Update Temporal revision
        if: steps.check-revision.outputs.has_update == 'true'
        run: |
          # Enter nix develop shell and run the update
          nix develop . --impure --accept-flake-config --command '
            ./scripts/update-temporal-revision.sh ${{ steps.check-revision.outputs.new_revision }}
          '

      - name: Check for changes
        if: steps.check-revision.outputs.has_update == 'true'
        id: check-changes
        run: |
          # Check if there are any changes to commit
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
          fi

      - name: Commit and push changes
        if: steps.check-revision.outputs.has_update == 'true' && steps.check-changes.outputs.has_changes == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add all changes
          git add .

          # Commit with descriptive message
          git commit -m "Update Temporal SDK to revision ${{ steps.check-revision.outputs.new_revision }}

          - Updated from ${{ steps.check-revision.outputs.current_revision }} to ${{ steps.check-revision.outputs.new_revision }}
          - Auto-generated by GitHub Actions

          This PR updates the Temporal SDK dependencies to the next available revision."

          # Push the branch
          git push origin "update-temporal-to-${{ steps.check-revision.outputs.new_revision }}"

      - name: Create Pull Request
        if: steps.check-revision.outputs.has_update == 'true' && steps.check-changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "update-temporal-to-${{ steps.check-revision.outputs.new_revision }}"
          title: "Update Temporal SDK to revision ${{ steps.check-revision.outputs.new_revision }}"
          body: |
            ## Summary

            This PR updates the Temporal SDK dependencies to revision `${{ steps.check-revision.outputs.new_revision }}`.

            ## Changes

            - **Previous revision:** `${{ steps.check-revision.outputs.current_revision }}`
            - **New revision:** `${{ steps.check-revision.outputs.new_revision }}`

            ## What was updated

            The following Temporal dependencies were updated:
            - `temporal-client`
            - `temporal-sdk-core`
            - `temporal-sdk-core-api`
            - `temporal-sdk-core-protos`
            - `rustfsm`

            ## Auto-generated

            This PR was automatically created by the [Auto-update Temporal SDK](/.github/workflows/auto-update-temporal.yml) workflow.

            ## Testing

            Please review the changes and run the test suite to ensure everything works correctly.

            - [ ] Tests pass
            - [ ] Build succeeds
            - [ ] No breaking changes introduced

            ## Related

            - Temporal SDK Core: https://github.com/temporalio/sdk-core
            - Commit: https://github.com/temporalio/sdk-core/commit/${{ steps.check-revision.outputs.new_revision }}
          labels: |
            dependencies
            temporal
            auto-generated
          assignees: |
            # Add your GitHub username here if you want to be assigned to these PRs
          reviewers: |
            # Add reviewers here if desired
          draft: false
          delete-branch: false

      - name: Comment on existing PR
        if: steps.check-revision.outputs.has_update == 'true' && steps.check-changes.outputs.has_changes == 'false'
        run: |
          echo "No changes detected - the revision may already be up to date or the changes are minimal"
          # You could add logic here to comment on existing PRs if needed

      - name: Log when no update is needed
        if: steps.check-revision.outputs.has_update == 'false'
        run: |
          echo "No new Temporal revision available"
          echo "Current revision is up to date"
