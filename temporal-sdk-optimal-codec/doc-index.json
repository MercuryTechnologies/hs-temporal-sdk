[{"display_html":"<a href=\"#v:defaultCodec\">defaultCodec</a> :: <a href=\"Temporal-Codec-Optimal.html#t:Composite\" title=\"Temporal.Codec.Optimal\">Composite</a> '[<a href=\"https://hackage.haskell.org/package/temporal-sdk-0.0.1.0/docs/Temporal-Payload.html#t:Null\" title=\"Temporal.Payload\">Null</a>, <a href=\"https://hackage.haskell.org/package/temporal-sdk-0.0.1.0/docs/Temporal-Payload.html#t:Binary\" title=\"Temporal.Payload\">Binary</a>, <a href=\"https://hackage.haskell.org/package/temporal-sdk-0.0.1.0/docs/Temporal-Payload.html#t:Protobuf\" title=\"Temporal.Payload\">Protobuf</a>, <a href=\"https://hackage.haskell.org/package/temporal-sdk-0.0.1.0/docs/Temporal-Payload.html#t:JSON\" title=\"Temporal.Payload\">JSON</a>]","name":"defaultCodec","module":"Temporal.Codec.Optimal","link":"Temporal-Codec-Optimal.html#v:defaultCodec"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Composite\">Composite</a> (codecs :: [<a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>]) <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:CompositeNil\">CompositeNil</a> :: <a href=\"Temporal-Codec-Optimal.html#t:Composite\" title=\"Temporal.Codec.Optimal\">Composite</a> ('[] :: [<a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>])</li><li><a href=\"#v:CompositeCons\">CompositeCons</a> :: <span class=\"keyword\">forall</span> codec (codecs1 :: [<a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>]). codec -&gt; <a href=\"Temporal-Codec-Optimal.html#t:Composite\" title=\"Temporal.Codec.Optimal\">Composite</a> codecs1 -&gt; <a href=\"Temporal-Codec-Optimal.html#t:Composite\" title=\"Temporal.Codec.Optimal\">Composite</a> (codec ': codecs1)</li></ul>","name":"Composite CompositeCons CompositeNil","module":"Temporal.Codec.Optimal","link":"Temporal-Codec-Optimal.html#t:Composite"},{"display_html":"<span class=\"keyword\">class</span> c <a href=\"#t:-124--124-\">||</a> d <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:dispatch\">dispatch</a> :: ((<a href=\"Temporal-Codec-Optimal.html#t:IsSat\" title=\"Temporal.Codec.Optimal\">IsSat</a> c <a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Type-Equality.html#t:-126-\" title=\"Data.Type.Equality\">~</a> '<a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Bool.html#v:True\" title=\"Data.Bool\">True</a>, c) =&gt; r) -&gt; ((<a href=\"Temporal-Codec-Optimal.html#t:IsSat\" title=\"Temporal.Codec.Optimal\">IsSat</a> c <a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Type-Equality.html#t:-126-\" title=\"Data.Type.Equality\">~</a> '<a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Bool.html#v:False\" title=\"Data.Bool\">False</a>, <a href=\"Temporal-Codec-Optimal.html#t:IsSat\" title=\"Temporal.Codec.Optimal\">IsSat</a> d <a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Type-Equality.html#t:-126-\" title=\"Data.Type.Equality\">~</a> '<a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Bool.html#v:True\" title=\"Data.Bool\">True</a>, d) =&gt; r) -&gt; r</li></ul>","name":"|| dispatch","module":"Temporal.Codec.Optimal","link":"Temporal-Codec-Optimal.html#t:-124--124-"},{"display_html":"<a href=\"#v:ifSat\">ifSat</a> :: <a href=\"Temporal-Codec-Optimal.html#t:IfSat\" title=\"Temporal.Codec.Optimal\">IfSat</a> ct =&gt; ((<a href=\"Temporal-Codec-Optimal.html#t:IsSat\" title=\"Temporal.Codec.Optimal\">IsSat</a> ct <a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Type-Equality.html#t:-126-\" title=\"Data.Type.Equality\">~</a> '<a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Bool.html#v:True\" title=\"Data.Bool\">True</a>, ct) =&gt; r) -&gt; (<a href=\"Temporal-Codec-Optimal.html#t:IsSat\" title=\"Temporal.Codec.Optimal\">IsSat</a> ct <a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Type-Equality.html#t:-126-\" title=\"Data.Type.Equality\">~</a> '<a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Bool.html#v:False\" title=\"Data.Bool\">False</a> =&gt; r) -&gt; r","name":"ifSat","module":"Temporal.Codec.Optimal","link":"Temporal-Codec-Optimal.html#v:ifSat"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:IfSat\">IfSat</a> ct = ct <a href=\"Temporal-Codec-Optimal.html#t:-124--124-\" title=\"Temporal.Codec.Optimal\">||</a> ()","name":"IfSat","module":"Temporal.Codec.Optimal","link":"Temporal-Codec-Optimal.html#t:IfSat"},{"display_html":"<span class=\"keyword\">type family</span> <a href=\"#t:IsSat\">IsSat</a> ct :: <a href=\"https://hackage.haskell.org/package/base-4.20.0.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a> <span class=\"keyword\">where ...</span>","name":"IsSat","module":"Temporal.Codec.Optimal","link":"Temporal-Codec-Optimal.html#t:IsSat"}]